{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Composer",
  "type": "Extension is missing in composer.json",
  "severity": "High",
  "comment": "\u0027ext-json\u0027 is missing in composer.json",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the usages of classes, functions, and constants from the PHP extensions not specified in \u003ci\u003ecomposer.json\u003c/i\u003e.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/php-parse",
      "language": "PHP",
      "line": 88,
      "offset": 37,
      "length": 17,
      "code": {
        "startLine": 86,
        "length": 17,
        "offset": 133,
        "surroundingCode": "        } elseif (\u0027json-dump\u0027 \u003d\u003d\u003d $operation) {\n            fwrite(STDERR, \"\u003d\u003d\u003e JSON dump:\\n\");\n            echo json_encode($stmts, JSON_PRETTY_PRINT), \"\\n\";\n        } elseif (\u0027var-dump\u0027 \u003d\u003d\u003d $operation) {\n            fwrite(STDERR, \"\u003d\u003d\u003e var_dump():\\n\");"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpComposerExtensionStubsInspection"
  },
  "hash": -3106604112063118053
},{
  "tool": "Code Inspection",
  "category": "Composer",
  "type": "Extension is missing in composer.json",
  "severity": "High",
  "comment": "\u0027ext-json\u0027 is missing in composer.json",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the usages of classes, functions, and constants from the PHP extensions not specified in \u003ci\u003ecomposer.json\u003c/i\u003e.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/php-parse",
      "language": "PHP",
      "line": 88,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 86,
        "length": 11,
        "offset": 113,
        "surroundingCode": "        } elseif (\u0027json-dump\u0027 \u003d\u003d\u003d $operation) {\n            fwrite(STDERR, \"\u003d\u003d\u003e JSON dump:\\n\");\n            echo json_encode($stmts, JSON_PRETTY_PRINT), \"\\n\";\n        } elseif (\u0027var-dump\u0027 \u003d\u003d\u003d $operation) {\n            fwrite(STDERR, \"\u003d\u003d\u003e var_dump():\\n\");"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpComposerExtensionStubsInspection"
  },
  "hash": 8329697892252801385
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Http/Middleware/Authenticate.php",
      "language": "PHP",
      "line": 31,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 29,
        "length": 17,
        "offset": 57,
        "surroundingCode": "     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string|null  $guard"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 7241010045628224060
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Http/Middleware/ExampleMiddleware.php",
      "language": "PHP",
      "line": 12,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 10,
        "length": 17,
        "offset": 57,
        "surroundingCode": "     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": -563325696845997173
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "High",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Providers/EventServiceProvider.php",
      "language": "PHP",
      "line": 15,
      "offset": 8,
      "length": 12,
      "code": {
        "startLine": 13,
        "length": 12,
        "offset": 42,
        "surroundingCode": "     */\n    protected $listen \u003d [\n        \\App\\Events\\ExampleEvent::class \u003d\u003e [\n            \\App\\Listeners\\ExampleListener::class,\n        ],"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 5004719645090020210
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "High",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Providers/EventServiceProvider.php",
      "language": "PHP",
      "line": 16,
      "offset": 12,
      "length": 15,
      "code": {
        "startLine": 14,
        "length": 15,
        "offset": 83,
        "surroundingCode": "    protected $listen \u003d [\n        \\App\\Events\\ExampleEvent::class \u003d\u003e [\n            \\App\\Listeners\\ExampleListener::class,\n        ],\n    ];"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 682198411129072732
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Exceptions/Handler.php",
      "language": "PHP",
      "line": 34,
      "offset": 15,
      "length": 1,
      "code": {
        "startLine": 32,
        "length": 1,
        "offset": 42,
        "surroundingCode": "     * @return void\n     *\n     * @throws \\Exception\n     */\n    public function report(Throwable $exception)"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 3784648370354009130
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Exceptions/Handler.php",
      "language": "PHP",
      "line": 44,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 42,
        "length": 17,
        "offset": 72,
        "surroundingCode": "     * Render an exception into an HTTP response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Throwable  $exception\n     * @return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\JsonResponse"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 4790959643743941160
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Exceptions/Handler.php",
      "language": "PHP",
      "line": 46,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 44,
        "length": 17,
        "offset": 103,
        "surroundingCode": "     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Throwable  $exception\n     * @return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\JsonResponse\n     *\n     * @throws \\Throwable"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 3564618268846348078
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Exceptions/Handler.php",
      "language": "PHP",
      "line": 46,
      "offset": 41,
      "length": 17,
      "code": {
        "startLine": 44,
        "length": 17,
        "offset": 129,
        "surroundingCode": "     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Throwable  $exception\n     * @return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\JsonResponse\n     *\n     * @throws \\Throwable"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 7492874915287930048
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "tests/TestCase.php",
      "language": "PHP",
      "line": 10,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 8,
        "length": 15,
        "offset": 54,
        "surroundingCode": "     * Creates the application.\n     *\n     * @return \\Laravel\\Lumen\\Application\n     */\n    public function createApplication()"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": 7534034746782424133
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "Moderate",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "routes/web.php",
      "language": "PHP",
      "line": 3,
      "offset": 9,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 16,
        "surroundingCode": "\u003c?php\n\n/** @var \\Laravel\\Lumen\\Routing\\Router $router */\n\n/*"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": -1503576498705512577
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Fully qualified name usage",
  "severity": "High",
  "comment": "Qualifier can be replaced with an import",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the fully qualified class names that can be shortened by adding the \u003ccode\u003euse\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/carbon",
      "language": "PHP",
      "line": 21,
      "offset": 10,
      "length": 12,
      "code": {
        "startLine": 19,
        "length": 12,
        "offset": 41,
        "surroundingCode": "require $dir.\u0027/autoload.php\u0027;\n\nexit((new \\Carbon\\Cli\\Invoker())(...$argv) ? 0 : 1);"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpFullyQualifiedNameUsageInspection"
  },
  "hash": -5981097495751590796
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Unresolved include",
  "severity": "Moderate",
  "comment": "Dynamic include expression \u0027require $options[\u0027prepend\u0027]\u0027 is not analysed.",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports non-resolved \u003ccode\u003einclude\u003c/code\u003e expressions.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/phpunit",
      "language": "PHP",
      "line": 54,
      "offset": 4,
      "length": 27,
      "code": {
        "startLine": 52,
        "length": 27,
        "offset": 39,
        "surroundingCode": "\nif (isset($options[\u0027prepend\u0027])) {\n    require $options[\u0027prepend\u0027];\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpIncludeInspection"
  },
  "hash": 1203198501179773329
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Unresolved include",
  "severity": "Moderate",
  "comment": "Dynamic include expression \u0027require PHPUNIT_COMPOSER_INSTALL\u0027 is not analysed.",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports non-resolved \u003ccode\u003einclude\u003c/code\u003e expressions.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/phpunit",
      "language": "PHP",
      "line": 59,
      "offset": 0,
      "length": 32,
      "code": {
        "startLine": 57,
        "length": 32,
        "offset": 18,
        "surroundingCode": "unset($options);\n\nrequire PHPUNIT_COMPOSER_INSTALL;\n\nPHPUnit\\TextUI\\Command::main();"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpIncludeInspection"
  },
  "hash": 3254377979941558961
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Unresolved include",
  "severity": "Moderate",
  "comment": "Dynamic include expression \u0027require $file\u0027 is not analysed.",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports non-resolved \u003ccode\u003einclude\u003c/code\u003e expressions.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/php-parse",
      "language": "PHP",
      "line": 6,
      "offset": 8,
      "length": 13,
      "code": {
        "startLine": 4,
        "length": 13,
        "offset": 133,
        "surroundingCode": "foreach ([__DIR__ . \u0027/../../../autoload.php\u0027, __DIR__ . \u0027/../vendor/autoload.php\u0027] as $file) {\n    if (file_exists($file)) {\n        require $file;\n        break;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpIncludeInspection"
  },
  "hash": -4094123726455519585
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Unresolved include",
  "severity": "Moderate",
  "comment": "Dynamic include expression \u0027include $file\u0027 is not analysed.",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports non-resolved \u003ccode\u003einclude\u003c/code\u003e expressions.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/var-dump-server",
      "language": "PHP",
      "line": 30,
      "offset": 33,
      "length": 13,
      "code": {
        "startLine": 28,
        "length": 13,
        "offset": 80,
        "surroundingCode": "function includeIfExists(string $file): bool\n{\n    return file_exists($file) \u0026\u0026 include $file;\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpIncludeInspection"
  },
  "hash": -4089911146625988950
},{
  "tool": "Code Inspection",
  "category": "Code smell",
  "type": "Inconsistent return points",
  "severity": "High",
  "comment": "Missing \u0027return\u0027 statement",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistencies in function/method exit points.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nThe following types of inconsistencies are reported:\n\u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003eThe function/method contains the \u003ccode\u003ereturn\u003c/code\u003e statements both with and without arguments.\u003c/li\u003e\n    \u003cli\u003eThe function/method may return a value or otherwise end its execution without returning anything.\u003c/li\u003e\n  \u003c/ul\u003e\n\u003cp\u003e\nTechnically these are not errors, but practically they usually indicate a programming mistake.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "app/Providers/AuthServiceProvider.php",
      "language": "PHP",
      "line": 37,
      "offset": 8,
      "length": 1,
      "code": {
        "startLine": 35,
        "length": 1,
        "offset": 110,
        "surroundingCode": "                return User::where(\u0027api_token\u0027, $request-\u003einput(\u0027api_token\u0027))-\u003efirst();\n            }\n        });\n    }\n}"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpInconsistentReturnPointsInspection"
  },
  "hash": -6935189432320020891
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Parameter\u0027s name changed during inheritance",
  "severity": "Moderate",
  "comment": "Parameter\u0027s name changed from \u0027e\u0027 to \u0027exception\u0027",
  "detailsInfo": "\u003chtml\u003e\n  \u003cbody\u003e\n    Reports the methods\u0027 parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.\n  \u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Exceptions/Handler.php",
      "language": "PHP",
      "line": 36,
      "offset": 37,
      "length": 10,
      "code": {
        "startLine": 34,
        "length": 10,
        "offset": 71,
        "surroundingCode": "     * @throws \\Exception\n     */\n    public function report(Throwable $exception)\n    {\n        parent::report($exception);"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpParameterNameChangedDuringInheritanceInspection"
  },
  "hash": 2869622595936006822
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Parameter\u0027s name changed during inheritance",
  "severity": "Moderate",
  "comment": "Parameter\u0027s name changed from \u0027e\u0027 to \u0027exception\u0027",
  "detailsInfo": "\u003chtml\u003e\n  \u003cbody\u003e\n    Reports the methods\u0027 parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.\n  \u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Exceptions/Handler.php",
      "language": "PHP",
      "line": 50,
      "offset": 47,
      "length": 10,
      "code": {
        "startLine": 48,
        "length": 10,
        "offset": 81,
        "surroundingCode": "     * @throws \\Throwable\n     */\n    public function render($request, Throwable $exception)\n    {\n        return parent::render($request, $exception);"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpParameterNameChangedDuringInheritanceInspection"
  },
  "hash": 8006885289684573834
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Traditional syntax array literal detected",
  "severity": "Moderate",
  "comment": "Traditional syntax array literal used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports traditional array syntax (\u003ccode\u003earray()\u003c/code\u003e) usages in array literals and suggests replacing them with short array syntax (\u003ccode\u003e[]\u003c/code\u003e).\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/phpunit",
      "language": "PHP",
      "line": 30,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 28,
        "length": 5,
        "offset": 12,
        "surroundingCode": "}\n\nforeach (array(__DIR__ . \u0027/../../autoload.php\u0027, __DIR__ . \u0027/../vendor/autoload.php\u0027, __DIR__ . \u0027/vendor/autoload.php\u0027) as $file) {\n    if (file_exists($file)) {\n        define(\u0027PHPUNIT_COMPOSER_INSTALL\u0027, $file);"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpTraditionalSyntaxArrayLiteralInspection"
  },
  "hash": 7882794920098215045
},{
  "tool": "Code Inspection",
  "category": "Code style",
  "type": "Traditional syntax array literal detected",
  "severity": "Moderate",
  "comment": "Traditional syntax array literal used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports traditional array syntax (\u003ccode\u003earray()\u003c/code\u003e) usages in array literals and suggests replacing them with short array syntax (\u003ccode\u003e[]\u003c/code\u003e).\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "vendor/bin/phpunit",
      "language": "PHP",
      "line": 51,
      "offset": 22,
      "length": 5,
      "code": {
        "startLine": 49,
        "length": 5,
        "offset": 25,
        "surroundingCode": "}\n\n$options \u003d getopt(\u0027\u0027, array(\u0027prepend:\u0027));\n\nif (isset($options[\u0027prepend\u0027])) {"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpTraditionalSyntaxArrayLiteralInspection"
  },
  "hash": -6687685904102444472
},{
  "tool": "Code Inspection",
  "category": "Undefined",
  "type": "Undefined method",
  "severity": "High",
  "comment": "Method \u0027where\u0027 is undefined",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n    Reports the references to class methods that are not defined.\n\u003c/body\u003e\n\u003c/html\u003e",
  "sources": [
    {
      "type": "file",
      "path": "app/Providers/AuthServiceProvider.php",
      "language": "PHP",
      "line": 35,
      "offset": 29,
      "length": 5,
      "code": {
        "startLine": 33,
        "length": 5,
        "offset": 145,
        "surroundingCode": "        $this-\u003eapp[\u0027auth\u0027]-\u003eviaRequest(\u0027api\u0027, function ($request) {\n            if ($request-\u003einput(\u0027api_token\u0027)) {\n                return User::where(\u0027api_token\u0027, $request-\u003einput(\u0027api_token\u0027))-\u003efirst();\n            }\n        });"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUndefinedMethodInspection"
  },
  "hash": -8650516232039681480
},{
  "tool": "Code Inspection",
  "category": "Unused",
  "type": "Unused import",
  "severity": "High",
  "comment": "Import \u0027Illuminate\\Contracts\\Queue\\ShouldQueue\u0027 is never used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports the imports that are never used.\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "app/Listeners/ExampleListener.php",
      "language": "PHP",
      "line": 6,
      "offset": 4,
      "length": 38,
      "code": {
        "startLine": 4,
        "length": 38,
        "offset": 34,
        "surroundingCode": "\nuse App\\Events\\ExampleEvent;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Queue\\InteractsWithQueue;\n"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUnusedAliasInspection"
  },
  "hash": -9211367742844207982
},{
  "tool": "Code Inspection",
  "category": "Unused",
  "type": "Unused import",
  "severity": "High",
  "comment": "Import \u0027Illuminate\\Queue\\InteractsWithQueue\u0027 is never used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports the imports that are never used.\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "app/Listeners/ExampleListener.php",
      "language": "PHP",
      "line": 7,
      "offset": 4,
      "length": 35,
      "code": {
        "startLine": 5,
        "length": 35,
        "offset": 77,
        "surroundingCode": "use App\\Events\\ExampleEvent;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Queue\\InteractsWithQueue;\n\nclass ExampleListener"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUnusedAliasInspection"
  },
  "hash": 2080243096788511287
},{
  "tool": "Code Inspection",
  "category": "Unused",
  "type": "Unused import",
  "severity": "High",
  "comment": "Import \u0027Illuminate\\Support\\Facades\\Gate\u0027 is never used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports the imports that are never used.\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "app/Providers/AuthServiceProvider.php",
      "language": "PHP",
      "line": 6,
      "offset": 4,
      "length": 31,
      "code": {
        "startLine": 4,
        "length": 31,
        "offset": 26,
        "surroundingCode": "\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Support\\ServiceProvider;\n"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUnusedAliasInspection"
  },
  "hash": -8352046207466123619
},{
  "tool": "Code Inspection",
  "category": "Unused",
  "type": "Unused import",
  "severity": "High",
  "comment": "Import \u0027Laravel\\Lumen\\Testing\\DatabaseMigrations\u0027 is never used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports the imports that are never used.\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "tests/ExampleTest.php",
      "language": "PHP",
      "line": 3,
      "offset": 4,
      "length": 40,
      "code": {
        "startLine": 1,
        "length": 40,
        "offset": 11,
        "surroundingCode": "\u003c?php\n\nuse Laravel\\Lumen\\Testing\\DatabaseMigrations;\nuse Laravel\\Lumen\\Testing\\DatabaseTransactions;\n"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUnusedAliasInspection"
  },
  "hash": 460751288694556999
},{
  "tool": "Code Inspection",
  "category": "Unused",
  "type": "Unused import",
  "severity": "High",
  "comment": "Import \u0027Laravel\\Lumen\\Testing\\DatabaseTransactions\u0027 is never used",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports the imports that are never used.\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "tests/ExampleTest.php",
      "language": "PHP",
      "line": 4,
      "offset": 4,
      "length": 42,
      "code": {
        "startLine": 2,
        "length": 42,
        "offset": 51,
        "surroundingCode": "\nuse Laravel\\Lumen\\Testing\\DatabaseMigrations;\nuse Laravel\\Lumen\\Testing\\DatabaseTransactions;\n\nclass ExampleTest extends TestCase"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUnusedAliasInspection"
  },
  "hash": -1465389291356481177
},{
  "tool": "Code Inspection",
  "category": "Unused",
  "type": "Unused parameter",
  "severity": "High",
  "comment": "Unused parameter \u0027router\u0027. The parameter\u0027s value is not used anywhere.",
  "detailsInfo": "\u003chtml\u003e\n\u003cbody\u003e\nReports the parameters that are considered unused in the following cases:\n  \u003cul\u003e\n    \u003cli\u003eThe parameter is passed by value, and the value is not used anywhere or is overwritten immediately.\u003c/li\u003e\n    \u003cli\u003eThe parameter is passed by reference, and the reference is not used anywhere or is overwritten immediately.\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n",
  "sources": [
    {
      "type": "file",
      "path": "bootstrap/app.php",
      "language": "PHP",
      "line": 111,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 109,
        "length": 7,
        "offset": 78,
        "surroundingCode": "$app-\u003erouter-\u003egroup([\n    \u0027namespace\u0027 \u003d\u003e \u0027App\\Http\\Controllers\u0027,\n], function ($router) {\n    require __DIR__.\u0027/../routes/web.php\u0027;\n});"
      }
    }
  ],
  "attributes": {
    "module": "workspace",
    "inspectionName": "PhpUnusedParameterInspection"
  },
  "hash": -5911456271657324613
}]}